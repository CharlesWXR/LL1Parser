package cn.edu.njnu.ll1.parser.generator;

import cn.edu.njnu.ll1.parser.exception.DriverException;
import cn.edu.njnu.ll1.parser.grammarelement.Symbol;
import cn.edu.njnu.ll1.parser.wordelement.TypeEnum;
import ${LL1TablePackage};

import java.util.List;
import java.util.Stack;

/*
 * Auto-generated driver class for LL1Table without the capacity to init the LL1Table,
 * requiring the LL1Table to init itself
 */

public class TableDriver {
	private LL1Table table = new LL1Table();
	private Stack<Symbol> symbolStack = new Stack<Symbol>();

	public TableDriver() {
	    // Init the stack with # and start
        this.symbolStack.push(Symbol.End);
        this.symbolStack.push(table.getBeginning());
    }

	public boolean next(Object type) throws Exception {
	    // Get next state, return whether to read next word
		Symbol present = this.symbolStack.peek();
		if (present.isTerminal) {
		    // If is terminal symbol in the top and matches, pop the it and read next
			if (present.type.equals(type)) {
				if (present.type == TypeEnum.End) {
				    // If is the end of the grammar and indeed get the end, accept
					System.out.println("Accepted!");
				}
				this.symbolStack.pop();
				return true;
			} else
			    // Invalid terminal symbol, error
				throw new DriverException(DriverException.InvalidInput);
		}

        // Is the non-terminal symbol, query the LL1Table
		List<Symbol> rule = this.table.getNext(present.identifier, type);
		if (rule == null)
			throw new DriverException(DriverException.InvalidInput);

        // Print reduce rule
		outputRule(present.identifier, rule);

        // Symbols in the right push in stack in reversed sequence
		this.symbolStack.pop();
		for (int i = rule.size() - 1; i >= 0; i--) {
			Symbol temp = rule.get(i);
			if (temp.equals(Symbol.Empty))
				continue;
			this.symbolStack.push(temp);
		}
		return false;
	}

	private void outputRule(String left, List<Symbol> right) {
		System.out.print(left + "\t==>\t");
		for (Symbol s : right) {
			System.out.print("{" + s.identifier + "}");
		}
		System.out.println("");
	}
}
